use dep::std;
mod utils;

fn check_low_leaf(pre_val: Field, cur_val: Field, next_val: Field) -> bool {
    utils::less_than(pre_val, cur_val) & ( utils::less_than(cur_val, next_val) | (next_val == 0))
}

fn check_membership<N>(path: [Field; N], val: Field, next_val: Field, next_idx: Field, index: Field, root: Field) -> bool {
    let leaf = std::hash::poseidon::bn254::hash_3([val,next_val,next_idx]);
    utils::cal_root_from_mtp(path,leaf,index) == root
}

fn check_non_membership<N>(path_low: [Field; N], val_low: Field, cur_val: Field, next_val: Field, next_idx: Field, index_low: Field, root: Field) -> bool {
    let leaf_low = std::hash::poseidon::bn254::hash_3([val_low,next_val,next_idx]);
    (utils::cal_root_from_mtp(path_low,leaf_low,index_low) == root) & check_low_leaf(val_low, cur_val, next_val)
}

fn insert<N>(root_old: Field, root_new: Field, path_low: [Field; N], index_low: Field, val_low: Field, next_val_low: Field, 
            next_idx_low:Field, val: Field, index: Field, path_new:[Field;N]) {
    assert(check_non_membership(path_low, val_low, val, next_val_low, next_idx_low, index_low, root_old) == true);
    let new_leaf_low = std::hash::poseidon::bn254::hash_3([val_low, val, index]);
    let cur_root = utils::cal_root_from_mtp(path_low, new_leaf_low, index_low);
    assert(utils::cal_root_from_mtp(path_new, get_zero(0), index) == cur_root);
    assert(check_membership(path_new, val, next_val_low, next_idx_low, index, root_new) == true);
}

unconstrained fn get_zero(i: u8) -> Field {
    let mut res = 0;
    if i==0 {res = 5317387130258456662214331362918410991734007599705406860481038345552731150762;}
    else if (i==1) {res = 5301900180746108365834837840355741695167403565517259206503735319173783315742;}
    else if (i==2) {res = 19759440382600727929415049642887307143518671081639244670052489500787514850212;}
    else if (i==3) {res = 11575399251628151734428362828441614938772848828475906566857213866326592241179;}
    else if (i==4) {res = 6632555919090241659299800894218068745568431736196896666697681740099319754273;}
    else if (i==5) {res = 2313232035512824863888346564211238648697583940443483502600731472911335817854;}
    else if (i==6) {res = 12219166190744012474665556054784140979314676975916090596913570678231824844496;}
    else if (i==7) {res = 16146864604902996392229526390577377437180881860230124064882884440248322100339;}
    else if (i==8) {res = 6883543445806624803603297055410892317599264946303553983246148642156945721809;}
    else if (i==9) {res = 11376031557295681140127084012245938798408060888509383225192187436273860950878;}
    else if (i==10) {res = 13241605803954237324747758640385138335781780544452364878098724458062976117242;}
    else if (i==11) {res = 17855149516804167337625231993818327714748909580849949294952537831754058414670;}
    else if (i==12) {res = 5150255556564484319136269061916843962561348275990403501481125286754601797805;}
    else if (i==13) {res = 6987786980040962217323608240860512602136308242543772977912408457104385595406;}
    else if (i==14) {res = 12673791472672914327028296381717349631548592060758239087545042240348016593302;}
    else if (i==15) {res = 9311366817918121883031003818542895863321158352954515731060536796838219379679;}
    else if (i==16) {res = 19585342603050165772395358149453302999296038452416557172220992666065524588903;}
    else if (i==17) {res = 8275043704423853810900845936958744738316525212865659311257431212306169446045;}
    else if (i==18) {res = 16186914510693313963181937763227692521094695382771382196248944425969899233840;}
    else if (i==19) {res = 767287730589592697964997275831534428290387386582193516309984231823744273525;}
    else if (i==20) {res = 8182961934280185552908516081891354585128675946832334410314642727305953230495;}
    else if (i==21) {res = 14553789876728003050984909720833228345703341783942046413329913248389004034924;}
    else if (i==22) {res = 6278449848160193613534961101404674224795668202070703678497109778769228770164;}
    else if (i==23) {res = 8979671514355837952844943277614674271246740514273131428387277329861932324931;}
    else if (i==24) {res = 21571534543733545789815777004636730528838914284333679118902566390287667028570;}
    else if (i==25) {res = 18924195170311205995329199132962258629761263537596441216670202833476308740987;}
    else if (i==26) {res = 19135056793797297106895003927293911553715031470085451353297367444045593886226;}
    else if (i==27) {res = 19880802233039501694132273141007514078082675668582073994501231061064322422311;}
    else if (i==28) {res = 13981684304997822704186619219231220214101708822880409798804837787926320255246;}
    else if (i==29) {res = 9114362048964899084797815362621027676695169625694813982057199762506308222437;}
    else if (i==30) {res = 16119926292128498499760018714973489263785338035469823266838928430729854428132;}
    else if (i==31) {res = 9066247990074734647376987472974149870232401410809652492321935259087598384293;}
    else if (i==32) {res = 775389356373991272891944630989602693981420205035441183290348903863870890005;}
    res
}